version: '3.6'

services:
    load_test:
        build: ./load_tests
        container_name: load_tests
        ports:
            - "8089:8089"
        volumes:
            - ./load_tests:/load_tests
        command: ["locust", "-f", "main.py"]
        depends_on:
            - api
    test:
        build:
            context: ./sensor_api
            dockerfile: dockerfile.test
        container_name: sensor_test_api
        ports:
            - "9001:${API_PORT}"
        environment:
            DEBUG: ${DEBUG}
            RELOAD: ${RELOAD}
            API_HOST: ${API_HOST}
            API_PORT: ${API_PORT}
            DB_HOST: db
            DB_DATABASE: greenole_iot
            DB_USER: ${DB_USER}
            DB_PASSWORD: ${DB_PASSWORD}
        volumes:
            - "./sensor_api:/api_tests"
        depends_on:
            - db
    api:
        build:
            context: ./sensor_api
            dockerfile: dockerfile.api
        container_name: sensor_api
        restart: always
        volumes:
            - "./sensor_api:/api"
        ports:
            - "${API_PORT}:${API_PORT}"
        environment:
            DEBUG: ${DEBUG}
            RELOAD: ${RELOAD}
            API_HOST: ${API_HOST}
            API_PORT: ${API_PORT}
            DB_HOST: db
            DB_DATABASE: greenole_iot
            DB_USER: ${DB_USER}
            DB_PASSWORD: ${DB_PASSWORD}
        depends_on:
            - db
        healthcheck:
            test: ["CMD-SHELL","curl", "-f","http://${API_HOST}:${API_PORT}/api/v1/"]
            interval: 1m30s
            timeout: 30s
            retries: 5
            start_period: 30s
    db:
        image: postgres:15.3
        restart: always
        container_name: sensor_db
        environment:
            POSTGRES_DB: greenole_iot
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        ports:
            - 5432:5432
        volumes:
            - ./db:/var/lib/postgresql/data
            - ./sql/meansurement_ddl.sql:/docker-entrypoint-initdb.d/meansurement_ddl.sql
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
            interval: 10s
            timeout: 5s
            retries: 3
